# frozen_string_literal: true

# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# This is the minimum version number required.
fastlane_version '2.201.0'

default_platform :ios

platform :ios do
  before_all do
    ensure_git_status_clean

    xcversion(version: '~> 14')
  end

  desc 'Run library tests'
  lane :tests do
    clean_result_files
    clean_derived_data

    iphone13 = Device.new('iOS', 'iPhone 13')
    appletv = Device.new('tvOS', 'Apple TV')
    devices = [iphone13, appletv]

    scheme = swift_package_name
    swift_package_tests = TestBuild.new(scheme, '', false)
    test_builds = [swift_package_tests]

    # Run all tests on various simulators
    srg_run_tests(devices, test_builds)

    # Produce JUnit files for CI
    srg_junit_files
  end

  after_all do
    reset_git_repo(skip_clean: true)
  end

  error do
    clean_build_artifacts
    reset_git_repo(skip_clean: true, force: true)
  end
end

Device = Struct.new :platform, :name
TestBuild = Struct.new :scheme, :scheme_suffix, :in_workspace

def swift_package_name
  JSON.parse((sh 'swift package dump-package'))['name']
end

def clean_result_files
  Dir['*.xml'].each { |file| File.delete(file) }
  FileUtils.remove_entry('xcresult', true)
end

def clean_derived_data
  Dir.chdir('..') { FileUtils.remove_entry(srg_xcodebuild_derived_data_path, true) }
end

def srg_run_tests(devices, test_builds)
  devices.each do |device|
    test_builds.each do |test_build|
      srg_xcodebuild(device, test_build)
    rescue StandardError => e
      raise e unless e.message.include? '** TEST FAILED **'

      UI.important("One or more tests failed on #{device.platform} (#{srg_xcodebuild_scheme(test_build)}). ⚠️")
    end
  end
end

def srg_xcodebuild(device, test_build)
  xcodebuild(
    test: true,
    xcargs: srg_test_xcargs,
    workspace: srg_xcodebuild_workspace(test_build),
    scheme: srg_xcodebuild_scheme(test_build),
    destination: srg_xcodebuild_destination(device),
    result_bundle_path: srg_xcodebuild_result_bundle_path(device, test_build),
    derivedDataPath: srg_xcodebuild_derived_data_path
  )
end

def srg_test_xcargs
  '-retry-tests-on-failure -testLanguage en -testRegion en-US'
end

def srg_xcodebuild_workspace(test_build)
  test_build.in_workspace ? "Tests/#{srg_xcodebuild_scheme(test_build)}.xcworkspace" : nil
end

def srg_xcodebuild_scheme(test_build)
  test_build.scheme + test_build.scheme_suffix
end

def srg_xcodebuild_destination(device)
  "platform=#{device.platform} Simulator,name=#{device.name}"
end

def srg_xcodebuild_result_bundle_path(device, test_build)
  "#{result_bundle_folder_path}#{test_build.scheme}-#{device.platform}"
end

def srg_xcodebuild_derived_data_path
  '.build/DerivedData'
end

def srg_junit_files
  srg_trainer
  override_junit_test_suite_names
  expose_junit_files
end

# Convert xcresults to JUnit files
def srg_trainer
  trainer(
    path: result_bundle_folder_path,
    output_directory: './fastlane',
    extension: raw_extension,
    output_remove_retry_attempts: true,
    fail_build: false
  )
end

def result_bundle_folder_path
  './fastlane/xcresult/'
end

def raw_extension
  '.rawjunit'
end

# Override JUnit test suite names to split iOS and tvOS test results
def override_junit_test_suite_names
  Dir["*#{raw_extension}"].each do |file_name|
    override_junit_test_suite_name(file_name)
  end
end

def override_junit_test_suite_name(file_name)
  platform = file_name.split('.').first.split('-').last
  file = File.open(file_name, 'r')
  xml = file.read.gsub('Tests" tests="', "-#{platform}\" tests=\"")
  xml = xml.gsub('-tests" tests="', "-#{platform}\" tests=\"")
  File.write(file_name, xml)
end

def expose_junit_files
  Dir["*#{raw_extension}"].each do |file_name|
    # Rename JUnit files with correct extension
    new_file_name = file_name.gsub(raw_extension, '.xml')
    File.rename(file_name, new_file_name) unless File.exist?(new_file_name)
  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
